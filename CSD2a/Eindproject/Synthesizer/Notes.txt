MySynthesizer:
Working name: Probable synthesizer

Project status:
Alle files zijn gecomment. De must, could & shoulds zijn duidelijk beschreven. Alles werkt nu goed. Ik me in vervolg het beste focussen op de eisen van het project. En vervolgens met extra tijd aan de should en coulds wagen.

Eisen:
	1. 	Duidelijke gebruikers interactie -- GUI moet makkelijk en intuitief zijn.
	2. Robuustheid van het programma, het programma mag niet crashen en moet foutmeldingen geven -- GUI moet een console hebben
	3. Duidelijk comments
	4. Werkend resultaat
	5. Git in de workflow

Important notes:
	- Denk aan uitbreiding tijdens het programmeren. 
		- Polyfoon maken
		- Synthese types 	--Zijn de functies binnen de types te abstraheren.
		- Midi input
		- Sequencer input afhankelijk.
		
Vragen:
	- Hoe werkt de callback van PyAudio.
		waarom kan ik de functie niet verplaatsen en waarom heeft de functie geen parameters nodig bij het gebruik in de stream.
	- Is de audio stream een thread?
	- Is het handiger als de buffer zo is opgedeelt:
		[[frame01],[frame02],etc.] ipv. 
		[f1ch1, f1ch2, f2ch1, f2ch2]
		
Bouwplan:
	MUST:
	+ input van de gebruiker voor steps en pitches 
		+ GUI intergreren, --lijst input, toggle inputs
		+ Sequencer bouwen 
			--pitch naar freq, step naar time
		+ GUI Design. Denk aan eis (1)
	+ Sequencer.
		 + Midi to freq
		 + Buttons in de gui.
	+ output Device input afhankelijk maken.
		Command line input voor de GUI en streams
	+ kans op parameters --Moddepth, modratio, (velocity, pitch)
		de kans wordt los van het tempo en dergelijke bepaald.
	
	SHOULD:
	- Clean afsluiten van alles: GUI, streams & loops.
	- record audio
		record function which fills itself with the buffer -- GUI Toggle, import wave
		!! zie stack exchange links.
	? Abstraheer de functies binnen de synthese types naar een function.
	- Fix the filter class in Synthesizer.py
		Kan deze ook met minder lange lijsten? []*8
		inputLijst -> outputLijst
	- Test optimal values for variables when finished.
		
 	COULD:
	- maak de synthesizer polyfoon
	- midi input
	+ een Fade class --met isActive
		- gebruikt als audio click oplossing en als muziekaal dynamisch verloop
	+ using probabilities to create random metronome differentiations or random velocity
		+ this requires a trigger functions in the adsr. Or a Trigger class outside of the ADSR. so it can be used 
		on different ocassions
		+ the latter requires a metronome and a triggertime which wont effect eachother