SOGM ideeen:
- sample initiatie automisch maken -> searchen door filesystem -> filenames gebruiken als strings -> string bewerking
- sample list aanmaken met een forloop -> de hoeveelheid beschikbare samples scannen in de map. 
- samples polyfoon maken

file directories / directory scanning -> python documentation


notes:
____________________________________

seqList:
[0, 1, 4, 7] #step events	()
[0, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0] #on/off arpeggiated events (vast aan een rate, makkelijk in te vullen)
[0.24, 0.45, 0.64, 0.72, 0.75, 0.94, 1.24] #timed events (alle mogelijke tijden, makkelijk te lezen)

.pop() is voor de linieare events
	wordt vaak gebruikt in audio om de laatste waardes uit buffers te halen
	dit vereist dus wel dat de lijst weer aangevuld wordt
	
Dit principe is ook handig voor random beats. Zodat de lijsten in een soort queue doorgegeven worden,
afhankelijk van de .pop(). Dit houdt alles lineair en even lang.


Leesbaarheid vs. Efficientie
event[0], event[1] vs. event.getTime, event.getSample

DEBUGGING:
- timeit library: Hiermee kan je bijhouden hoelang een stuk code duurt om uit te voeren.

import sys
sys.exit()
sys.stdin.

Wat is handiger: '_thread' vs. 'threading'?